# /*******************************************************************************
#  Copyright (C) 2021 Xilinx, Inc
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# *******************************************************************************/

[connectivity]
# Define number of kernels and their name
nk=ccl_offload:3:ccl_offload_0.ccl_offload_1.ccl_offload_2
nk=network_krnl:3:network_krnl_0.network_krnl_1.network_krnl_2
nk=reduce_sum_half_512:3:arith_hp_0.arith_hp_1.arith_hp_2
nk=reduce_sum_float_512:3:arith_fp_0.arith_fp_1.arith_fp_2
nk=reduce_sum_double_512:3:arith_dp_0.arith_dp_1.arith_dp_2
nk=reduce_sum_int32_t_512:3:arith_i32_0.arith_i32_1.arith_i32_2
nk=reduce_sum_int64_t_512:3:arith_i64_0.arith_i64_1.arith_i64_2
nk=fp_hp_stream_conv:3:downcast_0.downcast_1.downcast_2
nk=hp_fp_stream_conv:3:upcast_0.upcast_1.upcast_2

# Kernels Foorplaning
slr=ccl_offload_0:SLR0
slr=network_krnl_0:SLR0
slr=downcast_0:SLR0
slr=upcast_0:SLR0
slr=arith_hp_0:SLR0
slr=arith_fp_0:SLR0
slr=arith_dp_0:SLR0
slr=arith_i32_0:SLR0
slr=arith_i64_0:SLR0

sp=ccl_offload_0.m_axi_0:DDR[0]
sp=ccl_offload_0.m_axi_1:DDR[0]
sp=ccl_offload_0.m_axi_2:DDR[0]

# Kernels Foorplaning
slr=ccl_offload_1:SLR1
slr=network_krnl_1:SLR1
slr=downcast_1:SLR1
slr=upcast_1:SLR1
slr=arith_hp_1:SLR1
slr=arith_fp_1:SLR1
slr=arith_dp_1:SLR1
slr=arith_i32_1:SLR1
slr=arith_i64_1:SLR1

sp=ccl_offload_1.m_axi_0:DDR[1]
sp=ccl_offload_1.m_axi_1:DDR[1]
sp=ccl_offload_1.m_axi_2:DDR[1]

# Kernels Foorplaning
slr=ccl_offload_2:SLR2
slr=network_krnl_2:SLR2
slr=downcast_2:SLR2
slr=upcast_2:SLR2
slr=arith_hp_2:SLR2
slr=arith_fp_2:SLR2
slr=arith_dp_2:SLR2
slr=arith_i32_2:SLR2
slr=arith_i64_2:SLR2

sp=ccl_offload_2.m_axi_0:DDR[2]
sp=ccl_offload_2.m_axi_1:DDR[2]
sp=ccl_offload_2.m_axi_2:DDR[2]

# Connect CCL Offload kernel to TCP Network Kernel
sc=network_krnl_0.m_axis_tcp_port_status:ccl_offload_0.s_axis_tcp_port_status
sc=network_krnl_0.m_axis_tcp_open_status:ccl_offload_0.s_axis_tcp_open_status
sc=network_krnl_0.m_axis_tcp_notification:ccl_offload_0.s_axis_tcp_notification
sc=network_krnl_0.m_axis_tcp_rx_meta:ccl_offload_0.s_axis_tcp_rx_meta
sc=network_krnl_0.m_axis_tcp_rx_data:ccl_offload_0.s_axis_tcp_rx_data
sc=network_krnl_0.m_axis_tcp_tx_status:ccl_offload_0.s_axis_tcp_tx_status
sc=ccl_offload_0.m_axis_tcp_listen_port:network_krnl_0.s_axis_tcp_listen_port
sc=ccl_offload_0.m_axis_tcp_open_connection:network_krnl_0.s_axis_tcp_open_connection
sc=ccl_offload_0.m_axis_tcp_read_pkg:network_krnl_0.s_axis_tcp_read_pkg
sc=ccl_offload_0.m_axis_tcp_tx_meta:network_krnl_0.s_axis_tcp_tx_meta
sc=ccl_offload_0.m_axis_tcp_tx_data:network_krnl_0.s_axis_tcp_tx_data

sc=network_krnl_1.m_axis_tcp_port_status:ccl_offload_1.s_axis_tcp_port_status
sc=network_krnl_1.m_axis_tcp_open_status:ccl_offload_1.s_axis_tcp_open_status
sc=network_krnl_1.m_axis_tcp_notification:ccl_offload_1.s_axis_tcp_notification
sc=network_krnl_1.m_axis_tcp_rx_meta:ccl_offload_1.s_axis_tcp_rx_meta
sc=network_krnl_1.m_axis_tcp_rx_data:ccl_offload_1.s_axis_tcp_rx_data
sc=network_krnl_1.m_axis_tcp_tx_status:ccl_offload_1.s_axis_tcp_tx_status
sc=ccl_offload_1.m_axis_tcp_listen_port:network_krnl_1.s_axis_tcp_listen_port
sc=ccl_offload_1.m_axis_tcp_open_connection:network_krnl_1.s_axis_tcp_open_connection
sc=ccl_offload_1.m_axis_tcp_read_pkg:network_krnl_1.s_axis_tcp_read_pkg
sc=ccl_offload_1.m_axis_tcp_tx_meta:network_krnl_1.s_axis_tcp_tx_meta
sc=ccl_offload_1.m_axis_tcp_tx_data:network_krnl_1.s_axis_tcp_tx_data

sc=network_krnl_2.m_axis_tcp_port_status:ccl_offload_2.s_axis_tcp_port_status
sc=network_krnl_2.m_axis_tcp_open_status:ccl_offload_2.s_axis_tcp_open_status
sc=network_krnl_2.m_axis_tcp_notification:ccl_offload_2.s_axis_tcp_notification
sc=network_krnl_2.m_axis_tcp_rx_meta:ccl_offload_2.s_axis_tcp_rx_meta
sc=network_krnl_2.m_axis_tcp_rx_data:ccl_offload_2.s_axis_tcp_rx_data
sc=network_krnl_2.m_axis_tcp_tx_status:ccl_offload_2.s_axis_tcp_tx_status
sc=ccl_offload_2.m_axis_tcp_listen_port:network_krnl_2.s_axis_tcp_listen_port
sc=ccl_offload_2.m_axis_tcp_open_connection:network_krnl_2.s_axis_tcp_open_connection
sc=ccl_offload_2.m_axis_tcp_read_pkg:network_krnl_2.s_axis_tcp_read_pkg
sc=ccl_offload_2.m_axis_tcp_tx_meta:network_krnl_2.s_axis_tcp_tx_meta
sc=ccl_offload_2.m_axis_tcp_tx_data:network_krnl_2.s_axis_tcp_tx_data

# Connect tcp kernels in a loop
# this is temporary, the connections will be broken and 
# a switch inserted after BD creation
stream_connect=network_krnl_0.net_tx:network_krnl_1.net_rx
stream_connect=network_krnl_1.net_tx:network_krnl_2.net_rx
stream_connect=network_krnl_2.net_tx:network_krnl_0.net_rx

# Connect udp interfaces in a loop
stream_connect=ccl_offload_0.m_axis_udp_tx_data:ccl_offload_1.s_axis_udp_rx_data
stream_connect=ccl_offload_1.m_axis_udp_tx_data:ccl_offload_2.s_axis_udp_rx_data
stream_connect=ccl_offload_2.m_axis_udp_tx_data:ccl_offload_0.s_axis_udp_rx_data

# Some clarifications are necessary for the following:
# Vitis doesnt let us leave streams dangling
# or connected to other streams on the same kernel
# so when we need multiple things attached to the same kernel ports via
# a switch, we fist connect them in a daisy chain
# to the external kernel port.
#
# After system assembly, we can run a script which disconnects
# this arrangement, inserts a AXIS switch on the external 
# kernel streams, and puts required kernels on that switch

# (Temporary) arithmetic connections
stream_connect=ccl_offload_0.m_axis_arith_op:arith_hp_0.in_r
stream_connect=arith_hp_0.out_r:arith_fp_0.in_r
stream_connect=arith_fp_0.out_r:arith_dp_0.in_r
stream_connect=arith_dp_0.out_r:arith_i32_0.in_r
stream_connect=arith_i32_0.out_r:arith_i64_0.in_r
stream_connect=arith_i64_0.out_r:ccl_offload_0.s_axis_arith_res

stream_connect=ccl_offload_1.m_axis_arith_op:arith_hp_1.in_r
stream_connect=arith_hp_1.out_r:arith_fp_1.in_r
stream_connect=arith_fp_1.out_r:arith_dp_1.in_r
stream_connect=arith_dp_1.out_r:arith_i32_1.in_r
stream_connect=arith_i32_1.out_r:arith_i64_1.in_r
stream_connect=arith_i64_1.out_r:ccl_offload_1.s_axis_arith_res

stream_connect=ccl_offload_2.m_axis_arith_op:arith_hp_2.in_r
stream_connect=arith_hp_2.out_r:arith_fp_2.in_r
stream_connect=arith_fp_2.out_r:arith_dp_2.in_r
stream_connect=arith_dp_2.out_r:arith_i32_2.in_r
stream_connect=arith_i32_2.out_r:arith_i64_2.in_r
stream_connect=arith_i64_2.out_r:ccl_offload_2.s_axis_arith_res

# (Temporary) caster connections
#
# If no post-assembly script is run, the chain behaves like 
# a round-to-FP16 module (i.e cast to FP16 but represent in FP32)
stream_connect=ccl_offload_0.m_axis_krnl:downcast_0.in_r
stream_connect=downcast_0.out_r:upcast_0.in_r
stream_connect=upcast_0.out_r:ccl_offload_0.s_axis_krnl

stream_connect=ccl_offload_1.m_axis_krnl:downcast_1.in_r
stream_connect=downcast_1.out_r:upcast_1.in_r
stream_connect=upcast_1.out_r:ccl_offload_1.s_axis_krnl

stream_connect=ccl_offload_2.m_axis_krnl:downcast_2.in_r
stream_connect=downcast_2.out_r:upcast_2.in_r
stream_connect=upcast_2.out_r:ccl_offload_2.s_axis_krnl
