# /*******************************************************************************
#  Copyright (C) 2021 Xilinx, Inc
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# *******************************************************************************/
[connectivity]
# Define number of kernels and their name
nk=network_krnl:1:network_krnl_0
nk=ccl_offload:1:ccl_offload_0
nk=cmac_krnl:1:cmac_krnl_0
nk=reduce_sum_half_512:1:arith_hp_0
nk=reduce_sum_float_512:1:arith_fp_0
nk=reduce_sum_double_512:1:arith_dp_0
nk=reduce_sum_int32_t_512:1:arith_i32_0
nk=reduce_sum_int64_t_512:1:arith_i64_0
nk=fp_hp_stream_conv:1:downcast_0
nk=hp_fp_stream_conv:2:upcast_0.upcast_1
nk=loopback:2:lb_udp_0.lb_user_krnl

# Kernels Foorplaning
slr=downcast_0:SLR1
slr=upcast_0:SLR1
slr=upcast_1:SLR1
sld=lb_udp_0:SLR1
slr=lb_user_krnl:SLR1
slr=arith_hp_0:SLR1
slr=arith_fp_0:SLR1
slr=arith_dp_0:SLR1
slr=arith_i32_0:SLR1
slr=arith_i64_0:SLR1
slr=ccl_offload_0:SLR1
slr=network_krnl_0:SLR3
slr=cmac_krnl_0:SLR2

sp=network_krnl_0.m00_axi:DDR[3]
sp=network_krnl_0.m01_axi:DDR[3]
sp=ccl_offload_0.m_axi_0:DDR[0:2]
sp=ccl_offload_0.m_axi_1:DDR[0:2]
sp=ccl_offload_0.m_axi_2:DDR[0:2]

# Connect CCL Offload kernel to TCP Network Kernel
sc=network_krnl_0.m_axis_tcp_port_status:ccl_offload_0.s_axis_tcp_port_status:512
sc=network_krnl_0.m_axis_tcp_open_status:ccl_offload_0.s_axis_tcp_open_status:512
sc=network_krnl_0.m_axis_tcp_notification:ccl_offload_0.s_axis_tcp_notification:512
sc=network_krnl_0.m_axis_tcp_rx_meta:ccl_offload_0.s_axis_tcp_rx_meta:512
sc=network_krnl_0.m_axis_tcp_rx_data:ccl_offload_0.s_axis_tcp_rx_data:512
sc=network_krnl_0.m_axis_tcp_tx_status:ccl_offload_0.s_axis_tcp_tx_status:512
sc=ccl_offload_0.m_axis_tcp_listen_port:network_krnl_0.s_axis_tcp_listen_port:512
sc=ccl_offload_0.m_axis_tcp_open_connection:network_krnl_0.s_axis_tcp_open_connection:512
sc=ccl_offload_0.m_axis_tcp_read_pkg:network_krnl_0.s_axis_tcp_read_pkg:512
sc=ccl_offload_0.m_axis_tcp_tx_meta:network_krnl_0.s_axis_tcp_tx_meta:512
sc=ccl_offload_0.m_axis_tcp_tx_data:network_krnl_0.s_axis_tcp_tx_data:512

# Connect Network Kernel to CMAC Kernel
sc=cmac_krnl_0.axis_net_rx:network_krnl_0.axis_net_rx
sc=network_krnl_0.axis_net_tx:cmac_krnl_0.axis_net_tx

# Plug UDP interface
stream_connect=ccl_offload_0.m_axis_udp_tx_data:lb_udp_0.in
stream_connect=lb_udp_0.out:ccl_offload_0.s_axis_udp_rx_data

# Some clarifications are necessary for the following:
# Vitis doesnt let us leave streams dangling
# or connected to other streams on the same kernel
# so when we need multiple things attached to the same kernel ports via
# a switch, we fist connect them in a daisy chain
# to the external kernel port.
#
# After system assembly, we can run a script which disconnects
# this arrangement, inserts a AXIS switch on the external 
# kernel streams, and puts required kernels on that switch

# (Temporary) arithmetic connections
stream_connect=ccl_offload_0.m_axis_arith_op:arith_hp_0.in_r
stream_connect=arith_hp_0.out_r:arith_fp_0.in_r
stream_connect=arith_fp_0.out_r:arith_dp_0.in_r
stream_connect=arith_dp_0.out_r:arith_i32_0.in_r
stream_connect=arith_i32_0.out_r:arith_i64_0.in_r
stream_connect=arith_i64_0.out_r:ccl_offload_0.s_axis_arith_res

# (Temporary) caster connections
stream_connect=ccl_offload_0.m_axis_decompress0:upcast_0.in_r
stream_connect=upcast_0.out_r:ccl_offload_0.s_axis_decompress0

stream_connect=ccl_offload_0.m_axis_decompress1:upcast_1.in_r
stream_connect=upcast_1.out_r:ccl_offload_0.s_axis_decompress1

stream_connect=ccl_offload_0.m_axis_compress0:downcast_0.in_r
stream_connect=downcast_0.out_r:ccl_offload_0.s_axis_compress0

# Tie off user kernel interface
stream_connect=ccl_offload_0.m_axis_krnl:lb_user_krnl.in
stream_connect=lb_user_krnl.out:ccl_offload_0.s_axis_krnl
